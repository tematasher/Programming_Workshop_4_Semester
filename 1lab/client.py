import socket
import struct
import json
import sys


try:
    from tabulate import tabulate
    USE_TABULATE = True
except ImportError:
    USE_TABULATE = False


class Client:
    def __init__(self, host='localhost', port=7777):
        self.host = host
        self.port = port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)


    def authenticate(self):
        print("\nüîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É.")
        while True:
            username = input("üë§ –õ–æ–≥–∏–Ω: ").strip()
            password = input("üîë –ü–∞—Ä–æ–ª—å: ").strip()

            if not username or not password:
                print("‚ö†Ô∏è –ü–æ–ª—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
                continue

            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–æ–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç
            if self.socket.fileno() == -1:
                self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.connect()

            try:
                auth_data = json.dumps({'username': username, 'password': password})
                self.send_message(auth_data)
                response = json.loads(self.recv_message())

                if response.get("status") == "ok":
                    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                    return True
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", response.get("message"))
                    retry = input("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É? (y/n): ").lower().strip()
                    if retry != 'y':
                        return False

            except (ConnectionResetError, json.JSONDecodeError) as e:
                print("üîå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º:", e)
                return False
            

    def connect(self):
        try:
            self.socket.connect((self.host, self.port))
        except ConnectionRefusedError:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
            sys.exit(1)


    def send_message(self, message: str):
        encoded = message.encode('utf-8')
        length = struct.pack('!I', len(encoded))
        self.socket.sendall(length + encoded)


    def register_user(self):
        print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        while True:
            try:
                username = input("üë§ –ù–æ–≤—ã–π –ª–æ–≥–∏–Ω: ").strip()
                password = input("üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ").strip()
                if not username or not password:
                    print("‚ö†Ô∏è –ü–æ–ª—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
                    continue
                if ' ' in username or ' ' in password:
                    print("‚ö†Ô∏è –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤.")
                    continue

                # –µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
                if self.socket.fileno() == -1:  # –ø—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–∫—Ä—ã—Ç –ª–∏ —Å–æ–∫–µ—Ç
                    self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    self.connect()

                cmd_data = json.dumps({'command': 'ADD_USER', 'username': username, 'password': password})
                self.send_message(cmd_data)
                response = json.loads(self.recv_message())

                if response.get("status") == "ok":
                    print("üéâ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
                    return True
                else:
                    print("‚ùå –û—à–∏–±–∫–∞:", response.get("message"))
                    retry = input("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É? (y/n): ").strip().lower()
                    if retry != 'y':
                        return False

            except (ConnectionResetError, BrokenPipeError) as e:
                print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                self.socket.close()
                self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.connect()


    def print_help(self):
        print("\nüìò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  ‚ñ∂ SQL-–∑–∞–ø—Ä–æ—Å: –Ω–∞–ø—Ä–∏–º–µ—Ä, SELECT * FROM people WHERE age >= 25")
        print("  ‚ñ∂ GET_STRUCTURE ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("  ‚ñ∂ EXIT ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É\n")


    def recv_message(self) -> str:
        raw_length = self.socket.recv(4)
        if not raw_length:
            return None
        length = struct.unpack('!I', raw_length)[0]
        data = b''
        while len(data) < length:
            packet = self.socket.recv(length - len(data))
            if not packet:
                break
            data += packet
        return data.decode('utf-8')


    def run(self):
        try:
            print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
            self.connect()

            print("\nüîì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("  [1] –í—Ö–æ–¥")
            print("  [2] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
            choice = input("üëâ –í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()

            if choice == '2':
                if not self.register_user():
                    print("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                    return
                # –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
                print("\nüîÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
                if not self.authenticate():
                    self.socket.close()
                    return
            elif choice == '1':
                if not self.authenticate():
                    self.socket.close()
                    return
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                self.socket.close()
                return

            self.print_help()

            while True:
                cmd = input("sql> ").strip()

                if not cmd:
                    print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ 'EXIT'.")
                    continue

                if cmd.upper() == "EXIT":
                    self.send_message("EXIT")
                    print("üëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
                    break

                if cmd.upper() == "HELP":
                    self.print_help()
                    continue

                self.send_message(cmd)
                response = self.recv_message()

                if not response:
                    print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ.")
                    break

                response_data = json.loads(response)

                if response_data.get('status') == 'error':
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞:", response_data.get('message'))

                elif cmd.upper() == "GET_STRUCTURE":
                    print("\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
                    for table, columns in response_data.get('structure', {}).items():
                        print(f"  üìÅ {table}: {', '.join(columns)}")

                else:
                    result = response_data.get('result', [])
                    if not result:
                        print("üì≠ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
                    else:
                        print("üì• –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞:")
                        headers = result[0].keys()
                        rows = [[row[col] for col in headers] for row in result]

                        if USE_TABULATE:
                            print(tabulate(rows, headers, tablefmt="grid"))
                        else:
                            print(", ".join(headers))
                            for row in rows:
                                print(", ".join(str(cell) for cell in row))

                        if response_data.get('cached'):
                            print("üß† [–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞]")

        except Exception as e:
            print("‚ùó –û—à–∏–±–∫–∞:", e)
        finally:
            self.socket.close()
